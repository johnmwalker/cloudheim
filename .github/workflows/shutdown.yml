
name: Shutdown Cloudheim

on:
  workflow_dispatch:
    type_filter:
      type: string
      default: 't3a.large'
      description: The instance type to filter on.

# Should ensure that only one workflow can be run at a time
concurrency:
  group: launch
  cancel-in-progress: true

jobs:
  shutdown:
    name: Shutdown
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Confirm AWS Install
        run: aws --version

      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_CLI_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLI_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Instance
        id: ec2
        run: |
          ip=`aws ec2 describe-instances --filters "Name=instance-type,Values=${{inputs.type_filter}}" --query "Reservations[].Instances[].PublicIpAddress" --output text`
          echo ip="${ip}" >> $GITHUB_OUTPUT

      - name: Write PEM
        if: steps.ec2.outputs.ip
        run: |
          mkdir -p ${{runner.temp}}/.ssh
          echo "${{ secrets.VALHEIM_GITHUB_PEM }}" > ${{runner.temp}}/.ssh/my_key.pem
          chmod go= ${{runner.temp}}/.ssh/my_key.pem

      - name: Run shutdown
        if: steps.ec2.outputs.ip
        run: ssh -o "StrictHostKeyChecking=no" -i ${{runner.temp}}/.ssh/my_key.pem ubuntu@${{ steps.ec2.outputs.ip }} "cd /cloudheim; sudo git pull; sudo /cloudheim/shutdown.sh"

      - name: Terminate EC2
        if: steps.ec2.outputs.ip
        run: |
          id=`aws ec2 describe-instances --filters "Name=instance-type,Values=${{inputs.type_filter}}" --query "Reservations[].Instances[].InstanceId" --output text`
          # Warn on no id
          if [ -z "$id" ]; then
            echo "::error title=No ID Found::That's weird. Tell John."
          else
            echo "Terminating instace ID ${id}"
            aws ec2 terminate-instances --instance-ids $id
          fi
        
      - name: Warn if no instance
        if: ${{ ! steps.ec2.outputs.ip }}
        run: echo "::error title=No Instance Was Running::There was no instance to shut down."

      - name: Helpful error on failure
        if: failure()
        run: echo "::error title=Something Went Wrong::Please tell John."

